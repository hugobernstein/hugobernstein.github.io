doctype html
html
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    title Understanding and Using Ruby Rake
    meta(name='HandheldFriendly', content='True')
    meta(name='viewport', content='width=device-width,initial-scale=1')
    link(rel='stylesheet', type='text/css', href='/assets/built/screen.css?v=cb28b3d85e')
    link(rel='shortcut icon', href='/favicon.ico', type='image/x-icon')
    link(rel='canonical', href='http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/')
    meta(name='referrer', content='no-referrer-when-downgrade')
    meta(property='og:site_name', content='Culttt')
    meta(property='og:type', content='article')
    meta(property='og:title', content='Understanding and Using Ruby Rake')
    meta(property='og:description', content='Something that you will see a lot in Ruby projects is Rake. Rake is a build tool for automating tasks. This means you can define a set of tasks that should be carried out as part of a build process, or perhaps a set of tasks that should be executed')
    meta(property='og:url', content='http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/')
    meta(property='article:published_time', content='2015-08-05T06:00:14.000Z')
    meta(property='article:modified_time', content='2015-08-04T18:12:31.000Z')
    meta(name='twitter:card', content='summary')
    meta(name='twitter:title', content='Understanding and Using Ruby Rake')
    meta(name='twitter:description', content='Something that you will see a lot in Ruby projects is Rake. Rake is a build tool for automating tasks. This means you can define a set of tasks that should be carried out as part of a build process, or perhaps a set of tasks that should be executed')
    meta(name='twitter:url', content='http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/')
    meta(name='twitter:label1', content='Written by')
    meta(name='twitter:data1', content='Philip Brown')
    script(type='application/ld+json') {
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Culttt",
        "logo": "https://casper.ghost.org/v1.0.0/images/ghost-logo.svg"
    },
    "author": {
        "@type": "Person",
        "name": "Philip Brown",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/780290abdc8ae52adddecac01690747e?s=250&d=mm&r=x",
            "width": 250,
            "height": 250
        },
        "url": "http://www.culttt.com/author/philip/",
        "sameAs": []
    },
    "headline": "Understanding and Using Ruby Rake",
    "url": "http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/",
    "datePublished": "2015-08-05T06:00:14.000Z",
    "dateModified": "2015-08-04T18:12:31.000Z",
    "description": "Something that you will see a lot in Ruby projects is Rake. Rake is a build tool for automating tasks. This means you can define a set of tasks that should be carried out as part of a build process, or perhaps a set of tasks that should be executed",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "http://www.culttt.com/"
    }
}
    script(type='text/javascript', src='/public/ghost-sdk.min.js?v=cb28b3d85e')
    script(type='text/javascript') ghost.init({
	clientId: "ghost-frontend",
	clientSecret: "8d5f524d23c8"
});
    meta(name='generator', content='Ghost 1.21')
    link(rel='alternate', type='application/rss+xml', title='Culttt', href='http://www.culttt.com/rss/')
  body.post-template
    .site-wrapper
      header.site-header.outer
        .inner
          nav.site-nav
            .site-nav-left
              a.site-nav-logo(href='http://www.culttt.com')
                img(src='https://casper.ghost.org/v1.0.0/images/ghost-logo.svg', alt='Culttt')
              ul.nav(role='menu')
                li.nav-home(role='menuitem')
                  a(href='http://www.culttt.com/') Home
            .site-nav-right
              .social-links
              a.rss-button(href='https://feedly.com/i/subscription/feed/http://www.culttt.com/rss/', target='_blank', rel='noopener')
                svg(xmlns='http://www.w3.org/2000/svg', viewBox='0 0 24 24')
                  circle(cx='6.18', cy='17.82', r='2.18')
                  path(d='M4 4.44v2.83c7.03 0 12.73 5.7 12.73 12.73h2.83c0-8.59-6.97-15.56-15.56-15.56zm0 5.66v2.83c3.9 0 7.07 3.17 7.07 7.07h2.83c0-5.47-4.43-9.9-9.9-9.9z')
      main#site-main.site-main.outer(role='main')
        .inner
          article.post-full.post.no-image
            header.post-full-header
              section.post-full-meta
                time.post-full-meta-date(datetime='2015-08-05') 5 August 2015
              h1.post-full-title Understanding and Using Ruby Rake
            section.post-full-content
              .kg-card-markdown
                p Something that you will see a lot in Ruby projects is Rake. Rake is a build tool for automating tasks.
                p This means you can define a set of tasks that should be carried out as part of a build process, or perhaps a set of tasks that should be executed every time you run a specific command.
                p Rake allows you to create tasks that depend on one another or have prerequisites. This makes creating automated processes very easy.
                p In today’s tutorial we will be looking at Rake, how it works and what you will find yourself using it for.
                h2#installingrake Installing Rake
                p Like all good things Ruby, Rake is available as a Gem that you can install on your computer:
                pre
                  code.language-bash gem install rake  
[/bash]

If you’ve already got your Ruby environment set up, then there’s really nothing else much to say about installation!


## Creating a Rake file

The first thing we need to do is to create a `Rakefile` (without an extension). This file is where you list the tasks that you want to perform. Rakefiles are defined using Ruby, so if you’re familiar with the Ruby syntax, there should be nothing too crazy about this:  
```ruby  
task default: %w[hello]

task :hello do  
puts "Hello world!"  
end  

                p In this Rakefile we have two distinct things.
                p
                  | Firstly we have a task called
                  code default
                  | . All Rakefiles will have a default task. In this case, we’re saying that when the default task is run, we should execute the
                  code hello
                  | task.
                p
                  | Secondly we have the
                  code hello
                  | task. When this task is run it will simply print
                  code Hello world!
                  | to the screen.
                p
                  | If you save the
                  code Rakefile
                  | and run the following command from terminal, you should see the correct output:
                pre
                  code.language-bash $ rake  
Hello world!  
[/bash]


## Tasks can have prerequisites

So as you can see, it is very easy to define an automated task using Rake because it is just Ruby code.

However, the real power of Rake is when you start using tasks with prerequisites. This makes it possible to run a list of tasks in a given order.

For example, imagine if we wanted to automate deploying our website to our web server. We might have the following tasks:  
```ruby  
task :ssh_into_server do  
puts "ssh into server"  
end

task :move_to_directory do  
puts "cd to the correct directory"  
end

task :pull_code do  
puts "pulling code from Github"  
end

task :get_dependencies do  
puts "getting the dependencies"  
end

task :migrate_the_database do  
puts "migrating the database"  
end

task :set_file_permissions do  
puts "setting the file permissions"  
end

task :symlink_the_new_version do  
puts "symlinking the new version"  
end  

                p We can state that these tasks should be performed in the correct order by creating a new task that has prerequisites.
                pre
                  code.language-ruby 
                    | task :deploy => [:ssh_into_server, :move_to_directory, :pull_code, :get_dependencies, :migrate_the_database, :set_file_permissions, :symlink_the_new_version] do  
                    | puts “deploying the website!”  
                    | end  

                p Now with one single command we can completely automate the deployment of the website to the production server:
                pre
                  code.language-bash $ rake deploy  
                    | [/bash]


                    | ## Namespacing

A couple of weeks ago we looked at namespacing our code using [Modules](http://culttt.com/2015/07/01/creating-and-using-modules-in-ruby).

Namespacing is also an important topic in Rake as bigger projects could potentially have rake tasks that have conflicting names.

To solve this problem we can use namespaces. For example we might namespace our deployment process from above like this:  
```ruby  
namespace :ship_it do  
task :ssh_into_server do  
puts "ssh into server"  
end

# The rest of the tasks  
end  

                p
                  | Now to run the
                  code deploy
                  | task you would include the namespace as part of the command:
                pre
                  code.language-bash $ rake ship_it:deploy  
[/bash]


## Describing tasks

When you are first getting to grips with an existing project, it can be useful to check out the existing rake tasks to see what has been defined.

To list out the Rake tasks you can run the following command from terminal:  
```bash  
$ rake –tasks  
[/bash]

However, if you do that now you won’t see any output. To provide additional help to the user we can write a short description about the task:  
```ruby  
desc "SSH into the server."  
task :ssh_into_server do  
puts "ssh into server"  
end  

                p Now when you run the command again, you should see the following output:
                pre
                  code.language-bash $ rake —tasks  
rake ship_it:ssh_into_server # SSH into the server  
[/bash]


## Rake in the wild

You will find Rake in just about every Ruby project out in the wild. Rails makes good use of Rake and whenever you create a new Ruby gem, Rake will be included (more on that next week!).

In today’s tutorial we’ve looked at a hypothetical way of deploying a website to a server using Rake to automate a series of steps.

However, there is already a Rake-like tool out there called Capistrano that does this exact job, but much better.

[Capistrano](http://capistranorb.com) basically follows the same methodology of Rake by allowing you to define the tasks that should be invoked when deploying your website. However, Capistrano has an ecosystem of add ons and plugins that you can make use of, rather than rolling your own set of tasks.

For a long time, Capistrano has been a very popular way of deploying Ruby projects. However it can also be effectively used for any other type of project.



            footer.post-full-footer
              section.author-card
                img.author-profile-image(src='//www.gravatar.com/avatar/780290abdc8ae52adddecac01690747e?s=250&d=mm&r=x', alt='Philip Brown')
                section.author-card-content
                  h4.author-card-name
                    a(href='/author/philip/') Philip Brown
                  p
                    | Read
                    a(href='/author/philip/') more posts
                    | by this author.
              .post-full-footer-right
                a.author-card-button(href='/author/philip/') Read More
      aside.read-next.outer
        .inner
          .read-next-feed
            article.post-card.post.no-image
              .post-card-content
                a.post-card-content-link(href='/2015/08/10/dealing-with-exceptions-in-a-laravel-api-application/')
                  header.post-card-header
                    h2.post-card-title Dealing with Exceptions in a Laravel API application
                  section.post-card-excerpt
                    p Exceptions are a very important method for controlling the execution flow of an application. When an application request diverges from the happy path, it’s often important that you halt execution immediately and
                footer.post-card-meta
                  img.author-profile-image(src='//www.gravatar.com/avatar/780290abdc8ae52adddecac01690747e?s=250&d=mm&r=x', alt='Philip Brown')
                  span.post-card-author
                    a(href='/author/philip/') Philip Brown
            article.post-card.post.no-image
              .post-card-content
                a.post-card-content-link(href='/2015/08/03/adding-validation-to-ember-forms/')
                  header.post-card-header
                    h2.post-card-title Adding Validation to Ember Forms
                  section.post-card-excerpt
                    p Last week we looked at creating a new task in an Ember application. This involves accepting data from the form, creating a new task in Ember Data, and then saving the task, which
                footer.post-card-meta
                  img.author-profile-image(src='//www.gravatar.com/avatar/780290abdc8ae52adddecac01690747e?s=250&d=mm&r=x', alt='Philip Brown')
                  span.post-card-author
                    a(href='/author/philip/') Philip Brown
      .floating-header
        .floating-header-logo
          a(href='http://www.culttt.com')
            span Culttt
        span.floating-header-divider —
        .floating-header-title Understanding and Using Ruby Rake
        .floating-header-share
          .floating-header-share-label
            | Share this
            svg(xmlns='http://www.w3.org/2000/svg', viewBox='0 0 24 24')
              path(d='M7.5 15.5V4a1.5 1.5 0 1 1 3 0v4.5h2a1 1 0 0 1 1 1h2a1 1 0 0 1 1 1H18a1.5 1.5 0 0 1 1.5 1.5v3.099c0 .929-.13 1.854-.385 2.748L17.5 23.5h-9c-1.5-2-5.417-8.673-5.417-8.673a1.2 1.2 0 0 1 1.76-1.605L7.5 15.5zm6-6v2m-3-3.5v3.5m6-1v2')
          a.floating-header-share-tw(href='https://twitter.com/share?text=Understanding%20and%20Using%20Ruby%20Rake&url=http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/', onclick='window.open(this.href, 'share-twitter', 'width=550,height=235');return false;')
            svg(xmlns='http://www.w3.org/2000/svg', viewBox='0 0 32 32')
              path(d='M30.063 7.313c-.813 1.125-1.75 2.125-2.875 2.938v.75c0 1.563-.188 3.125-.688 4.625a15.088 15.088 0 0 1-2.063 4.438c-.875 1.438-2 2.688-3.25 3.813a15.015 15.015 0 0 1-4.625 2.563c-1.813.688-3.75 1-5.75 1-3.25 0-6.188-.875-8.875-2.625.438.063.875.125 1.375.125 2.688 0 5.063-.875 7.188-2.5-1.25 0-2.375-.375-3.375-1.125s-1.688-1.688-2.063-2.875c.438.063.813.125 1.125.125.5 0 1-.063 1.5-.25-1.313-.25-2.438-.938-3.313-1.938a5.673 5.673 0 0 1-1.313-3.688v-.063c.813.438 1.688.688 2.625.688a5.228 5.228 0 0 1-1.875-2c-.5-.875-.688-1.813-.688-2.75 0-1.063.25-2.063.75-2.938 1.438 1.75 3.188 3.188 5.25 4.25s4.313 1.688 6.688 1.813a5.579 5.579 0 0 1 1.5-5.438c1.125-1.125 2.5-1.688 4.125-1.688s3.063.625 4.188 1.813a11.48 11.48 0 0 0 3.688-1.375c-.438 1.375-1.313 2.438-2.563 3.188 1.125-.125 2.188-.438 3.313-.875z')
          a.floating-header-share-fb(href='https://www.facebook.com/sharer/sharer.php?u=http://www.culttt.com/2015/08/05/understanding-and-using-ruby-rake/', onclick='window.open(this.href, 'share-facebook','width=580,height=296');return false;')
            svg(xmlns='http://www.w3.org/2000/svg', viewBox='0 0 32 32')
              path(d='M19 6h5V0h-5c-3.86 0-7 3.14-7 7v3H8v6h4v16h6V16h5l1-6h-6V7c0-.542.458-1 1-1z')
        progress.progress(value='0')
          .progress-container
            span.progress-bar
      footer.site-footer.outer
        .site-footer-content.inner
          section.copyright
            a(href='http://www.culttt.com') Culttt
            | © 2018
          nav.site-footer-nav
            a(href='http://www.culttt.com') Latest Posts
            a(href='https://ghost.org', target='_blank', rel='noopener') Ghost
    script(src='https://code.jquery.com/jquery-3.2.1.min.js', integrity='sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=', crossorigin='anonymous')
    script(type='text/javascript', src='/assets/js/jquery.fitvids.js?v=cb28b3d85e')
    script // NOTE: Scroll performance is poor in Safari
// - this appears to be due to the events firing much more slowly in Safari.
//   Dropping the scroll event and using only a raf loop results in smoother
//   scrolling but continuous processing even when not scrolling
$(document).ready(function () {
    // Start fitVids
    var $postContent = $(".post-full-content");
    $postContent.fitVids();
    // End fitVids

    var progressBar = document.querySelector('progress');
    var header = document.querySelector('.floating-header');
    var title = document.querySelector('.post-full-title');

    var lastScrollY = window.scrollY;
    var lastWindowHeight = window.innerHeight;
    var lastDocumentHeight = $(document).height();
    var ticking = false;

    function onScroll() {
        lastScrollY = window.scrollY;
        requestTick();
    }

    function onResize() {
        lastWindowHeight = window.innerHeight;
        lastDocumentHeight = $(document).height();
        requestTick();
    }

    function requestTick() {
        if (!ticking) {
            requestAnimationFrame(update);
        }
        ticking = true;
    }

    function update() {
        var trigger = title.getBoundingClientRect().top + window.scrollY;
        var triggerOffset = title.offsetHeight + 35;
        var progressMax = lastDocumentHeight - lastWindowHeight;

        // show/hide floating header
        if (lastScrollY >= trigger + triggerOffset) {
            header.classList.add('floating-active');
        } else {
            header.classList.remove('floating-active');
        }

        progressBar.setAttribute('max', progressMax);
        progressBar.setAttribute('value', lastScrollY);

        ticking = false;
    }

    window.addEventListener('scroll', onScroll, {passive: true});
    window.addEventListener('resize', onResize, false);

    update();
});
